<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Coupon</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        :root {
    --primary-bg: #1a1f26;
    --secondary-bg: #1B232D;
    --text-primary: #ffffff;
    --text-secondary: #8b949e;
    --accent-color: #22c55e;
    --accent-hover: #2E8B57;
    --danger-color: #ef4444;
    --danger-hover: #dc2626;
    --border-color: #2d3643;
    --hover-bg: #262d36;
    --border-radius: 8px;
}

body {
    background-color: var(--primary-bg);
    font-family: 'Inter', sans-serif;
    color: var(--text-primary);
    padding-left: 90px;
}

.main-container {
    padding: 2rem;
    padding-left: calc(2rem + 90px);
    min-height: 100vh;
}

.form-container {
    background-color: var(--secondary-bg);
    border-radius: var(--border-radius);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.page-title {
    color: var(--text-primary);
    font-size: 1.8rem;
    margin-bottom: 2rem;
    font-weight: 600;
}

/* Form Styling */
.form-label {
    color: var(--text-primary);
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.form-control,
.form-select {
    background-color: var(--hover-bg);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    border-radius: var(--border-radius);
    padding: 0.75rem;
}

.form-control:focus,
.form-select:focus {
    background-color: var(--hover-bg);
    border-color: var(--accent-color);
    color: var(--text-primary);
    box-shadow: 0 0 0 0.25rem rgba(34, 197, 94, 0.25);
}

.form-control::placeholder {
    color: var(--text-secondary);
}

/* Input Group Styling */
.input-group .form-control {
    border-right: none;
}

.input-group .btn {
    border-top-right-radius: var(--border-radius) !important;
    border-bottom-right-radius: var(--border-radius) !important;
}

/* Button Styling */
.btn {
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: var(--accent-color);
    border-color: var(--accent-color);
    color: var(--text-primary);
}

.btn-primary:hover {
    background-color: var(--accent-hover);
    border-color: var(--accent-hover);
}

.btn-danger {
    background-color: var(--danger-color);
    border-color: var(--danger-color);
    color: var(--text-primary);
}

.btn-danger:hover {
    background-color: var(--danger-hover);
    border-color: var(--danger-hover);
}

/* Invalid Feedback */
.invalid-feedback {
    color: var(--danger-color);
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

/* Form Control States */
.form-control.is-invalid,
.form-select.is-invalid {
    border-color: var(--danger-color);
    background-image: none;
}

.form-control.is-invalid:focus,
.form-select.is-invalid:focus {
    border-color: var(--danger-color);
    box-shadow: 0 0 0 0.25rem rgba(239, 68, 68, 0.25);
}

/* Custom Date Input Styling */
input[type="date"] {
    background-color: var(--hover-bg);
}

input[type="date"]::-webkit-calendar-picker-indicator {
    filter: invert(1);
    opacity: 0.7;
    cursor: pointer;
}

/* Number Input Arrows Styling */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
    opacity: 1;
    background: var(--secondary-bg);
}

/* Responsive Design */
@media (max-width: 768px) {
    body {
        padding-left: 0;
    }

    .main-container {
        padding: 1rem;
    }

    .form-container {
        padding: 1.5rem;
    }

    .btn {
        padding: 0.625rem 1.25rem;
    }
}

@media (max-width: 576px) {
    .form-container {
        padding: 1rem;
    }

    .page-title {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .d-flex.gap-3 {
        flex-direction: column;
        gap: 1rem !important;
    }

    .btn {
        width: 100%;
    }
}
    </style>
</head>
<body>

        <!-- Include Sidebar (similar to reference code) -->
  <%- include('./layout/asidebar.ejs') %>
 
 
 
  <main class="main-content">
    <div class="container-fluid">
       


    <div class="main-container">
        <div class="form-container">
            <h1 class="page-title">Add New Coupon</h1>
            
            <form id="couponForm" >
                <div class="row g-4">
                    <div class="col-md-12">
                        <label for="couponCode" class="form-label">Coupon Code*</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="couponCode"  
                                   pattern="^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$">
                            <button type="button" class="btn btn-primary" id="generateCode">Generate</button>
                        </div>
                        <div class="invalid-feedback"></div>
                    </div>
                    <h1></h1>
                    <div class="col-md-6">
                        <label for="discountType" class="form-label">Discount Type*</label>
                        <select class="form-select" id="discountType" >
                            <option value="">Select type</option>
                            <option value="percentage">Percentage</option>
                            <option value="fixed">Fixed Amount</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="discountValue" class="form-label">Discount Value*</label>
                        <input type="number" class="form-control" id="discountValue"  min="0">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6" id="maxDiscountContainer" style="display: none;">
                        <label for="maxDiscount" class="form-label">Maximum Discount*</label>
                        <input type="number" class="form-control" id="maxDiscount" min="0">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="minPurchase" class="form-label">Minimum Purchase*</label>
                        <input type="number" class="form-control" id="minPurchase"  min="0">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="startDate" class="form-label">Start Date*</label>
                        <input type="date" class="form-control" id="startDate" >
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="endDate" class="form-label">End Date*</label>
                        <input type="date" class="form-control" id="endDate" >
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="usageLimit" class="form-label">Usage Limit*</label>
                        <input type="number" class="form-control" id="usageLimit"  min="1">
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-md-6">
                        <label for="status" class="form-label">Status*</label>
                        <select class="form-select" id="status" >
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="col-12 mt-4">
                        <div class="d-flex gap-3 justify-content-end flex-wrap">
                            <button type="button" class="btn btn-danger" id="cancelBtn">Cancel</button>
                            <button type="submit" class="btn btn-primary">Create Coupon</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

</div>
</main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('couponForm');
            const discountTypeSelect = document.getElementById('discountType');
            const maxDiscountContainer = document.getElementById('maxDiscountContainer');
    
            const rules = {
                couponCode: {
                    pattern: /^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/,
                    message: 'Must be in format XXXX-XXXX-XXXX (uppercase letters and numbers only)'
                },
                discountValue: {
                    percentage: {
                        max: 100,
                        message: 'Percentage discount cannot exceed 100%'
                    },
                    fixed: {
                        max: 1000000,
                        message: 'Fixed discount cannot exceed 1,000,000'
                    }
                },
                dates: {
                    minGap: 24 * 60 * 60 * 1000,
                    maxGap: 365 * 24 * 60 * 60 * 1000
                }
            };
    
            const tooltips = {};
    
            function showTooltip(element, message) {
                if (tooltips[element.id]) {
                    tooltips[element.id].remove();
                }
    
                const tooltip = document.createElement('div');
                tooltip.className = 'tooltip';
                tooltip.textContent = message;
                tooltip.style.opacity = '0';
    
                document.body.appendChild(tooltip);
    
                const rect = element.getBoundingClientRect();
                tooltip.style.top = `${rect.bottom + window.scrollY + 5}px`;
                tooltip.style.left = `${rect.left + window.scrollX}px`;
    
                requestAnimationFrame(() => {
                    tooltip.style.opacity = '1';
                });
    
                tooltips[element.id] = tooltip;
            }
    
            function hideTooltip(elementId) {
                if (tooltips[elementId]) {
                    tooltips[elementId].remove();
                    delete tooltips[elementId];
                }
            }
    
            document.getElementById('generateCode').addEventListener('click', () => {
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                const segments = Array(3).fill(null).map(() => 
                    Array(4).fill(null)
                        .map(() => chars.charAt(Math.floor(Math.random() * chars.length)))
                        .join('')
                );
                document.getElementById('couponCode').value = segments.join('-');
                validateField('couponCode');
            });
    
            discountTypeSelect.addEventListener('change', function() {
                maxDiscountContainer.style.display = 
                    this.value === 'percentage' ? 'block' : 'none';
    
                if (this.value === 'percentage') {
                    document.getElementById('maxDiscount').required = true;
                } else {
                    document.getElementById('maxDiscount').required = false;
                    document.getElementById('maxDiscount').value = '';
                }
                validateField('discountValue');
            });
    
            function validateField(fieldId) {
                const field = document.getElementById(fieldId);
                const feedback = field.nextElementSibling;
                let isValid = true;
                let message = '';
    
                if (!field.value) {
                    isValid = false;
                    message = 'This field is required';
                } else {
                    switch (fieldId) {
                        case 'couponCode':
                            if (!rules.couponCode.pattern.test(field.value)) {
                                isValid = false;
                                message = rules.couponCode.message;
                            }
                            break;
    
                        case 'discountValue':
                            const value = parseFloat(field.value);
                            const type = discountTypeSelect.value;
    
                            if (value <= 0) {
                                isValid = false;
                                message = 'Discount value must be greater than 0';
                            } else if (type === 'percentage' && value > rules.discountValue.percentage.max) {
                                isValid = false;
                                message = rules.discountValue.percentage.message;
                            } else if (type === 'fixed' && value > rules.discountValue.fixed.max) {
                                isValid = false;
                                message = rules.discountValue.fixed.message;
                            }
                            break;
    
                        case 'maxDiscount':
                            const maxValue = parseFloat(field.value);
                            const discountValue = parseFloat(document.getElementById('discountValue').value);
    
                            if (maxValue <= 0) {
                                isValid = false;
                                message = 'Maximum discount must be greater than 0';
                            } else if (maxValue < discountValue) {
                                isValid = false;
                                message = 'Maximum discount cannot be less than discount value';
                            }
                            break;
    
                        case 'startDate':
                        case 'endDate':
                            const startDate = new Date(document.getElementById('startDate').value);
                            const endDate = new Date(document.getElementById('endDate').value);
                            const today = new Date();
                            today.setHours(0, 0, 0, 0);
    
                            if (startDate < today) {
                                isValid = false;
                                message = 'Start date cannot be in the past';
                            } else if (startDate && endDate) {
                                const diff = endDate - startDate;
                                if (diff < rules.dates.minGap) {
                                    isValid = false;
                                    message = 'End date must be at least 1 day after start date';
                                } else if (diff > rules.dates.maxGap) {
                                    isValid = false;
                                    message = 'Coupon duration cannot exceed 1 year';
                                }
                            }
                            break;
    
                        case 'minPurchase':
                            const minPurchase = parseFloat(field.value);
                            if (minPurchase < 0) {
                                isValid = false;
                                message = 'Minimum purchase amount cannot be negative';
                            }
                            break;
    
                        case 'usageLimit':
                            const limit = parseInt(field.value);
                            if (limit < 1 || limit > 10000) {
                                isValid = false;
                                message = 'Usage limit must be between 1 and 10,000';
                            }
                            break;
                    }
                }
    
                field.classList.toggle('is-invalid', !isValid);
                if (!isValid) {
                    feedback.textContent = message;
                    showTooltip(field, message);
                } else {
                    hideTooltip(field.id);
                }
                return isValid;
            }
    
            form.addEventListener('submit', async function(e) {
                try {
                    e.preventDefault();
                    let isValid = true;
                    const fields = ['couponCode', 'discountType', 'discountValue', 'minPurchase', 
                    'startDate', 'endDate', 'usageLimit', 'status'];
    
                    if (discountTypeSelect.value === 'percentage') {
                        fields.push('maxDiscount');
                    }
    
                    fields.forEach(field => {
                        if (!validateField(field)) {
                            isValid = false;
                        }
                    });
    
                    if (isValid) {
                        
                        const couponCode = document.getElementById('couponCode').value;
                        const discountType = document.getElementById('discountType').value;
                        const discountValue = document.getElementById('discountValue').value;
                        const maxDiscount = document.getElementById('maxDiscount').value;
                        const minPurchase = document.getElementById('minPurchase').value;
                        const startDate = document.getElementById('startDate').value;
                        const endDate = document.getElementById('endDate').value;
                        const usageLimit = document.getElementById('usageLimit').value;
                        const status = document.getElementById('status').value;
    
                        const response = await fetch('/admin/couponManagement/add', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                couponCode,
                                discountType,
                                discountValue,
                                maxDiscount,
                                minPurchase,
                                startDate,
                                endDate,
                                usageLimit,
                                status,
                            }),
                        });
    
                        const result = await response.json();
    
                        if (result.success) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Coupon has been created successfully',
                                background: '#282c34',
                                color: '#ecf0f1',
                                confirmButtonColor: '#3498db'
                            })
                               
                        
                            window.location.href = '/admin/couponManagement';
                                
                           
                        }
                    } else {
                        await Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please check all fields and try again',
                            background: '#282c34',
                            color: '#ecf0f1',
                            confirmButtonColor: '#3498db'
                        });
                    }
                } catch (error) {
                    console.error('Error submitting the form:', error);

                }
            });
    
            document.getElementById('cancelBtn').addEventListener('click', () => {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'All entered data will be lost',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, cancel',
                    cancelButtonText: 'No, keep editing',
                    background: '#282c34',
                    color: '#ecf0f1',
                    confirmButtonColor: '#e74c3c',
                    cancelButtonColor: '#3498db'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.history.back();
                    }
                });
            });
    
            form.querySelectorAll('input, select').forEach(field => {
                ['blur', 'input'].forEach(eventType => {
                    field.addEventListener(eventType, () => validateField(field.id));
                });
            });
    
            window.addEventListener('beforeunload', () => {
                Object.keys(tooltips).forEach(key => {
                    hideTooltip(key);
                });
            });
        });
    </script>
    
</body>
</html>