<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Product Management Panel</title>

  <!-- External CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin/productAdd.css">
</head>

<body>
  <!-- Sidebar Include -->
  <%- include('./layout/aside.ejs') %>

  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-8 col-md-10">
        <div class="product-form-container">
          <h2 class="text-center mb-4">Update Product</h2>

          <form id="productForm" enctype="multipart/form-data">
            <!-- Hidden Fields -->
            <input type="hidden" id="productId" name="productId" value="<%= product.id %>">

            <!-- Basic Product Information -->
            <div class="row">
              <div class="col-md-12">
                <div class="form-group">
                  <label for="productName" class="form-label">Product Name</label>
                  <input type="text" class="form-control" id="productName" name="productName" value="<%= product.name %>">
                  <p id="productNameError" class="text-danger" style="display:none;">Please enter a valid product name.</p>
                </div>
              </div>
            </div>

            <!-- Price Information -->
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="productPrice" class="form-label">Price</label>
                  <input type="number" class="form-control" id="productPrice" name="productPrice" value="<%= product.price %>">
                  <p id="productPriceError" class="text-danger" style="display:none;">Please enter a valid price.</p>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="offerPrice" class="form-label">Offer Price</label>
                  <input type="number" class="form-control" id="offerPrice" name="productOfferPrice" value="<%= product.offerPrice %>">
                  <p id="offerPriceError" class="text-danger" style="display:none;">Please enter a valid offer price.</p>
                </div>
              </div>
            </div>

            <!-- Product Images -->
            <div class="form-group">
              <label class="form-label">Product Images</label>
              <div class="round-preview-container">
                <% for (let i = 0; i < 4; i++) { %>
                <div class="image-upload-wrapper">
                  <label for="productImages<%= i %>">
                    <img id="roundPreview<%= i %>" class="round-preview"
                         src="<%= product.images[i] || '/default-image.png' %>"
                         alt="Preview <%= i + 1 %>" />
                  </label>
                  <div style="display: none;" class="file-input-container">
                      <input type="file" class="form-control"
                      id="productImages<%= i %>"
                      name="productImages[]"
                      accept="image/*"/>
                  </div>
                  <input type="hidden" name="existingImages[]" value="<%= product.images[i] %>" />

                </div>
                <% } %>
              </div>
            </div>

            <!-- Product Details -->
            <div class="form-group">
              <label for="productDescription" class="form-label">Description</label>
              <textarea class="form-control" id="productDescription" name="productDescription" rows="3"><%= product.description %></textarea>
              <p id="productDescriptionError" class="text-danger" style="display:none;">Please enter a product description.</p>
            </div>

            <!-- Additional Information -->
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="productTags" class="form-label">Tags</label>
                  <input type="text" class="form-control" id="productTags" name="productTags" placeholder="Comma separated" value="<%= product.tags %>">
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="productBrand" class="form-label">Brand</label>
                  <input type="text" class="form-control" id="productBrand" name="productBrand" value="<%= product.brand %>">
                </div>
              </div>
            </div>

            <!-- Warranty and Return Policy -->
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="productWarranty" class="form-label">Warranty</label>
                  <input type="text" class="form-control" id="productWarranty" name="productWarranty" placeholder="e.g., 1 year" value="<%= product.warranty %>">
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <label for="productReturnPolicy" class="form-label">Return Policy</label>
                  <input type="text" class="form-control" id="productReturnPolicy" name="productReturnPolicy" placeholder="e.g., 30 days" value="<%= product.returnPolicy %>">
                </div>
              </div>
            </div>

            <!-- Category Selection -->
            <div class="form-group">
              <label for="productCategory" class="form-label">Category</label>
              <select class="form-control" id="productCategory" name="productCategory">
                <% categories.forEach(category => { %>
                <option value="<%= category._id %>" <%= category._id.equals(product.category) ? 'selected' : '' %>>
                  <%= category.name %>
                </option>
                <% }) %>
              </select>
              <p id="productCategoryError" class="text-danger" style="display:none;">Please select a product category.</p>
            </div>

            <!-- Stock Management -->
            <div class="row mt-3">
              <div class="col-12">
                <div class="form-group">
                  <label class="form-label">Stock Management</label>
                  <div id="stockManagementContainer" class="row g-3">
                    <!-- Stock inputs will be dynamically generated here -->
                  </div>
                  <input type="hidden" name="productStockManagement" id="productStockManagement" 
                         value="<%= JSON.stringify(product.stockManagement || []) %>">
                </div>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="text-center">
              <button type="submit" id="Updatesubmit" class="btn btn-primary btn-submit mt-3 w-50">
                Update Product
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Image Cropping Modal -->
    <div class="modal fade" id="cropImageModal" tabindex="-1" aria-labelledby="cropImageModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cropImageModalLabel">Crop Image</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <img id="imageToCrop" src="" alt="Image to crop" style="max-width: 100%;" />
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" id="cropButton" class="btn btn-primary">Crop Image</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- External Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Your existing scripts remain unchanged -->
  <script>
    
   document.getElementById("productForm").addEventListener("submit", async function (event) {
    event.preventDefault(); 

    // Clear previous error messages
    const errorMessages = document.querySelectorAll(".error-message");
    errorMessages.forEach((msg) => msg.remove());

    // Get form values
    const productId = document.getElementById("productId").value.trim();
    const productName = document.getElementById("productName").value.trim();
    const productPrice = parseFloat(document.getElementById("productPrice").value);
    const offerPrice = parseFloat(document.getElementById("offerPrice").value) || null;
    const productDescription = document.getElementById("productDescription").value.trim();
    const productTags = document.getElementById("productTags").value.trim();
    const productBrand = document.getElementById("productBrand").value.trim();
    const productWarranty = document.getElementById("productWarranty").value.trim();
    const productReturnPolicy = document.getElementById("productReturnPolicy").value.trim();
    const productCategory = document.getElementById("productCategory").value;
    const productStockManagement = document.getElementById("productStockManagement").value;
    // const productImages = [...document.querySelectorAll("[name='productImages[]']")];
    const productImages = [...document.querySelectorAll('input[type="file"]')];
      
    console.log("checking1: productImages:--->"+productImages);
      
    // const productImages = document.querySelectorAll('input[type="file"][name="productImages[]"]');
    const productImagesArray = Array.from(productImages);
    console.log("check2:productImagesArray:---->"+productImagesArray);
    
    
    let hasError = false;


    productImagesArray.forEach((input, index) => {
    console.log(`check 3:Input----> ${index + 1}:<==>`, input); 

    if (input && input.files) {
        const files = input.files;
        if (files.length > 0) {
            console.log(`check 4: Files for input:----> ${index + 1}<====>:`, files);  
        } else {
            console.log(`No files selected for input ${index + 1}`);
        }
    } else {
        console.log(`Input ${index + 1} is not found or does not support files.`);
        hasError = true;
    }
});


  

   
    function showError(inputId, message) {
        const inputElement = document.getElementById(inputId);
        console.log("check 5: inputId:------>"+inputElement);
        
        if (!inputElement) {
        console.error(`Element with id "${inputId}" not found.`);
        return;
    }
        const error = document.createElement("p");
        error.classList.add("text-danger", "error-message");
        error.textContent = message;
        inputElement.parentElement.appendChild(error);
        hasError = true;
    }

    // Validate fields
    if (!productId) {
        console.error("Missing product ID. This field is required for updates.");
        hasError = true; 
    }

    if (!productName) {
        showError("productName", "Product name is required.");
    }

    if (isNaN(productPrice) || productPrice <= 0) {
        showError("productPrice", "Please enter a valid price greater than zero.");
    }

    if (offerPrice !== null && (isNaN(offerPrice) || offerPrice >= productPrice)) {
        showError("offerPrice", "Offer price must be less than the original price.");
    }

    if (!productDescription) {
        showError("productDescription", "Product description is required.");
    }

    if (!productCategory) {
        showError("productCategory", "Please select a product category.");
    }

    if (productTags && productTags.split(",").length > 10) {
        showError("productTags", "You can add up to 10 tags only.");
    }

    if (productBrand && productBrand.length > 50) {
        showError("productBrand", "Brand name cannot exceed 50 characters.");
    }

    if (productWarranty && !/^\d+\s*(year|month)s?$/i.test(productWarranty)) {
        showError("productWarranty", "Warranty must be in the format (e.g., 1 year, 6 months).");
    }

    if (productReturnPolicy && !/^\d+\s*(day|month)s?$/i.test(productReturnPolicy)) {
        showError("productReturnPolicy", "Return policy must be in the format (e.g., 30 days, 1 month).");
    }

    // Validate stock management (if applicable)
    if (productStockManagement) {
        try {
            const stockData = JSON.parse(productStockManagement);
            if (!Array.isArray(stockData)) {
                throw new Error();
            }
            stockData.forEach((item) => {
                if (!item.size || !item.quantity || item.quantity <= 0) {
                    throw new Error();
                }
            });
        } catch {
            showError("productStockManagement", "Invalid stock management data. Please check your inputs.");
        }
    }

    // Validate image uploads
    let imageUploaded = false;

    productImages.forEach((input, index) => {
      const fileInput = document.getElementById(`productImages${index }`);
      const files = fileInput.files; 
      console.log(`this is the image.id:-->${input.id}`);
      

      console.log(":::::::::::=>"+files);
        if (files.length > 0) {
            imageUploaded = true;
            const file = input.files[0];
            if (!file.type.startsWith("image/")) {
                showError(input.id, `Image ${index + 1} must be a valid image file.`);
            }
        }
    });

    if (!imageUploaded) {
        showError("image0", "Please upload at least one product image.");
    }
    // If there are errors, return early
    if (hasError) {
        Swal.fire("Error", "Please fix the highlighted errors.", "error");
        return;
    }

    try {
        const response = await fetch(`/admin/productManagement/update/${productId}`, {
            method: 'PUT',
            body: JSON.srtingify({
              name: product.name,
              description: product.description,
              price: product.price,
              offerPrice: product.offerPrice,
              categoryId: product.categoryId,
              tags: product.tags,
              brand: product.brand,
              stockManagement: productStockManagement,
              images: Array.from(productImages, (input) => input.files.map((file) => file.name))

            })

            
          });
          console.log("^^^^^^^^^^^^^^^^"+images)

        const result = await response.json();

        if (result.success) {
          Swal.fire({
        title: "Are you sure?",
        text: "Do you want to update this product?",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Yes, update it!",
    }).then(() => {
                window.location.href = '/admin/productManagement';
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: result.message,
                icon: 'error'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred while updating the product',
            icon: 'error'
        });
    }

  
    });

    //=============================>>>>

 // Image Cropping Logic
let cropper = null;
let currentInput = null;
let currentModal = null;

// Initialize cropper modal
const cropImageModal = new bootstrap.Modal(document.getElementById('cropImageModal'));

// Function to handle image selection
function handleImageSelect(event) {
  const file = event.target.files[0];
  currentInput = event.target;

  if (!file || !file.type.startsWith('image/')) {
    Swal.fire({
      title: 'Error',
      text: 'Please select a valid image file.',
      icon: 'error'
    });
    return;
  }

  // Get preview image element
  const inputIndex = currentInput.id.replace('productImages', '');
  const previewImage = document.getElementById(`roundPreview${inputIndex}`);

  // Read the file
  const reader = new FileReader();
  reader.onload = function(e) {
    const imageToCrop = document.getElementById('imageToCrop');
    imageToCrop.src = e.target.result;

    // Destroy existing cropper if it exists
    if (cropper) {
      cropper.destroy();
    }

    // Wait for image to load before initializing cropper
    imageToCrop.onload = function() {
      cropper = new Cropper(imageToCrop, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.8,
        responsive: true,
        restore: true,
        modal: true,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false
      });
    };

    // Show the modal
    cropImageModal.show();
  };

  reader.readAsDataURL(file);
}

// Function to handle crop button click
function handleCrop() {
  if (!cropper || !currentInput) {
    console.error('Cropper or input not initialized');
    return;
  }

  const croppedCanvas = cropper.getCroppedCanvas({
    width: 500,    // Set desired output size
    height: 500,
    imageSmoothingEnabled: true,
    imageSmoothingQuality: 'high'
  });

  const croppedImage = croppedCanvas.toDataURL('image/jpeg', 0.9);

  // Update preview image
  const inputIndex = currentInput.id.replace('productImages', '');
  const previewImage = document.getElementById(`roundPreview${inputIndex}`);
  previewImage.src = croppedImage;

  // Convert data URL to File object
  croppedCanvas.toBlob((blob) => {
    const fileName = currentInput.files[0].name;
    const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
    
    // Update the file input
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(croppedFile);
    currentInput.files = dataTransfer.files;
    
    // Close modal and cleanup
    cropImageModal.hide();
    cropper.destroy();
    cropper = null;
  }, 'image/jpeg', 0.9);
}

// Initialize event listeners
document.addEventListener('DOMContentLoaded', function() {
  // Add change listeners to all image inputs
  document.querySelectorAll('input[type="file"][name="productImages[]"]').forEach(input => {
    input.addEventListener('change', handleImageSelect);
  });

  // Add click listener to crop button
  document.getElementById('cropButton').addEventListener('click', handleCrop);

  // Handle modal close
  document.getElementById('cropImageModal').addEventListener('hidden.bs.modal', function() {
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  });
});

// Utility: Convert data URL to Blob
function dataURLToBlob(dataURL) {
  const parts = dataURL.split(",");
  const mime = parts[0].match(/:(.*?);/)[1];
  const binary = atob(parts[1]);
  const array = [];
  for (let i = 0; i < binary.length; i++) {
    array.push(binary.charCodeAt(i));
  }
  return new Blob([new Uint8Array(array)], { type: mime });
}

//============================================================================>>>>>>>>>>

document.addEventListener('DOMContentLoaded', function() {
  const categorySelect = document.getElementById('productCategory');
  const stockContainer = document.getElementById('stockManagementContainer');
  const stockManagementInput = document.getElementById('productStockManagement');

  // Size configurations
  const sizeConfigs = {
    'pants': Array.from({length: 9}, (_, i) => (28 + (i * 2)).toString()),
    'shirt': ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']
  };

  // Function to create stock input fields
  function createStockFields(category) {
    // Get the category name
    const categoryName = category.options[category.selectedIndex].text.toLowerCase();
    
    // Get appropriate sizes
    const sizes = sizeConfigs[categoryName] || [];
    
    // Get current stock data
    let currentStock = {};
    try {
      const stockData = JSON.parse(stockManagementInput.value);
      stockData.forEach(item => {
        currentStock[item.size] = item.quantity;
      });
    } catch (e) {
      console.error('Error parsing stock data:', e);
    }

    // Create HTML for stock inputs
    stockContainer.innerHTML = '';
    sizes.forEach(size => {
      const quantity = currentStock[size] || 0;
      const col = document.createElement('div');
      col.className = 'col-md-3 mb-3';
      col.innerHTML = `
        <div class="input-group">
          <span class="input-group-text">${size}</span>
          <input 
            type="number" 
            class="form-control stock-input" 
            data-size="${size}" 
            value="${quantity}"
            min="0"
            placeholder="Quantity"
          >
        </div>
      `;
      stockContainer.appendChild(col);
    });

    // Add change listeners to new inputs
    document.querySelectorAll('.stock-input').forEach(input => {
      input.addEventListener('change', updateStockManagement);
    });

    // Update hidden input
    updateStockManagement();
  }

  // Function to update hidden stock management input
  function updateStockManagement() {
    const stockData = [];
    document.querySelectorAll('.stock-input').forEach(input => {
      const quantity = parseInt(input.value) || 0;
      if (quantity >= 0) {
        stockData.push({
          size: input.dataset.size,
          quantity: quantity
        });
      }
    });
    stockManagementInput.value = JSON.stringify(stockData);
  }

  // Listen for category changes
  categorySelect.addEventListener('change', function() {
    createStockFields(this);
  });

  // Initialize stock fields with current category
  createStockFields(categorySelect);

  // Add change listeners to existing stock inputs
  document.querySelectorAll('.stock-input').forEach(input => {
    input.addEventListener('change', updateStockManagement);
  });
});



// document.getElementById('productForm').addEventListener('submit', async function(e) {
//     e.preventDefault();
    
    
// });
  </script>
</body>
</html>