<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tactics - Responsive Dashboard</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <link rel="stylesheet" href="/css/user/address.css">
</head>

<body>

      <!-------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
 <%- include('./layout/NAV.ejs') %>
 <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
 

  <div class="profile-session-container">
    <div class="container-fluid">
      <div class="dashboard">
        <!-- Sidebar -->
        <div class="sidebar">
          <a href="/dashboard" class="w-100">
            <button class="nav-button w-100">dashboard</button>
          </a>
          <a href="/order" class="w-100">
            <button class="nav-button w-100">Orders</button>
          </a>

          <a href="/profile" class="w-100">
            <button class="nav-button w-100">Update Profile</button>
          </a>

          <a href="/address" class="w-100">
            <button class="nav-button active w-100">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Address
            </button>
          </a>
          <a href="/wallet" class="w-100">
            <button class="nav-button w-100">Wallet</button>
          </a>
          <a href="/logout" class="w-100">
            <button class="nav-button w-100">Logout</button>
          </a>
        </div>

        <!-- Main Content -->
        <div class="main-content">
          <h2 class="section-title">Address</h2>
          <div class="container mt-5">
            <div class="row">
              <div class="col-12">
                <div class="card">
                  <div class="card-header d-flex justify-content-between align-items-center">
                    <h2>Address Management</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addressModal" onclick="prepareModal('create')">
                      Create New Address
                    </button>
                  </div>

                  <!-- Address List (Pagination) -->
                  <div class="card-body">
                    <% if (addresses && addresses.length > 0) { %>
                    <div class="row">
                      <% addresses.forEach((address, index) => { %>
                      <div class="col-12 mb-3 address-card">
                        <div class="card">
                          <div class="card-body">
                            <p><strong>House:</strong> <%= address.house %></p>
                            <p><strong>Street:</strong> <%= address.street %></p>
                            <p><strong>landmark:</strong> <%= address.landmark %></p>
                            <p><strong>City:</strong> <%= address.city %></p>
                            <p><strong>District:</strong> <%= address.district %></p>
                            <p><strong>State:</strong> <%= address.state %></p>
                            <p><strong>Country:</strong> <%= address.country %></p>
                            <p><strong>PIN Code:</strong> <%= address.pinCode %></p>
                            <div class="d-flex justify-content-between">
                              <button class="btn btn-warning" onclick="prepareModal('edit', <%= JSON.stringify(address) %>)">
                                Edit
                              </button>
                              <button class="btn btn-danger" onclick="removeAddress('<%= address.id %>')">
                                Remove
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                    </div>

                    <!-- Pagination -->
                    <nav aria-label="Address navigation">
                      <ul class="pagination justify-content-center">
                        <% for(let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                        <% } %>
                      </ul>
                    </nav>
                    <% } else { %>
                    <p class="text-center">No addresses found. Click "Create New Address" to add one.</p>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <!-- Address Modal -->
            <div class="modal fade" id="addressModal" tabindex="-1">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Create/Update Address</h5>
                    <button type="button" class="btn-close"  onclick="cancelButton()" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <form id="addressForm">
                      <input type="hidden" id="addressId" name="id">
                      <div class="mb-3">
                        <label for="houseInput" class="form-label">House</label>
                        <input type="text" class="form-control" id="houseInput" name="house" required autocomplete="street-address" aria-describedby="houseHelp">
                      </div>
                      <div class="mb-3">
                        <label for="streetInput" class="form-label">Street</label>
                        <input type="text" class="form-control" id="streetInput" name="street" required autocomplete="street-address" aria-describedby="streetHelp">
                      </div>
                      <div class="mb-3">
                        <label for="landmarkInput" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="landmarkInput" name="landmark" required autocomplete="address-line2" aria-describedby="landmarkHelp">
                      </div>
                      <div class="mb-3">
                        <label for="cityInput" class="form-label">City</label>
                        <input type="text" class="form-control" id="cityInput" name="city" required autocomplete="address-level2" aria-describedby="cityHelp">
                      </div>
                      <div class="mb-3">
                        <label for="districtInput" class="form-label">District</label>
                        <input type="text" class="form-control" id="districtInput" name="district" required autocomplete="address-level2" aria-describedby="districtHelp">
                      </div>
                      <div class="mb-3">
                        <label for="stateInput" class="form-label">State</label>
                        <input type="text" class="form-control" id="stateInput" name="state" required autocomplete="address-level1" aria-describedby="stateHelp">
                      </div>
                      <div class="mb-3">
                        <label for="countryInput" class="form-label">Country</label>
                        <input type="text" class="form-control" id="countryInput" name="country" required autocomplete="country" aria-describedby="countryHelp">
                      </div>
                      <div class="mb-3">
                        <label for="pinCodeInput" class="form-label">PIN Code</label>
                        <input type="text" class="form-control" id="pinCodeInput" name="pinCode" required autocomplete="postal-code" aria-describedby="pinCodeHelp">
                      </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal" onclick="cancelButton()">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveButton" onclick="saveAddress()">Save Address</button>
                  </div>
                </div>
              </div>
            </div>
          </div>


        </div>
      </div>
    </div>
  </div>



<!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!------footer------->
    <%- include('./layout/FOOTER.ejs') %>
      <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
      

  <!-- Bootstrap JS and Dependencies -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addressForm = document.getElementById('addressForm');
      const saveButton = document.getElementById('saveButton');

      function prepareModal(mode, addressData = null) {
        // console.log('Prepare Modal Called', mode, addressData);
        const modalTitle = document.getElementById('modalTitle');
        const saveButton = document.getElementById('saveButton');
        const modal = new bootstrap.Modal(document.getElementById('addressModal'));

        if (mode === 'create') {
          modalTitle.textContent = 'Create New Address';
          saveButton.textContent = 'Create Address';
        //   resetForm();
          modal.show();
        } else if (mode === 'edit' && addressData) {
          // console.log('Edit mode', addressData);
          modalTitle.textContent = 'Update Address';
          saveButton.textContent = 'Update Address';

          // Parse the addressData if it's a string (from JSON.stringify)
          const address = typeof addressData === 'string' ?
            JSON.parse(addressData) :
            addressData;

          populateForm(address);
          modal.show();
        }
      }

      function populateForm(addressData) {
        // console.log('Populating Form with:', addressData);

        document.getElementById('addressId').value = addressData._id || addressData.id || '';
        document.getElementById('houseInput').value = addressData.house || addressData.house || '';
        document.getElementById('streetInput').value = addressData.street || '';
        document.getElementById('landmarkInput').value = addressData.landmark || '';
        document.getElementById('cityInput').value = addressData.city || '';
        document.getElementById('districtInput').value = addressData.district || '';
        document.getElementById('stateInput').value = addressData.state || '';
        document.getElementById('countryInput').value = addressData.country || '';
        document.getElementById('pinCodeInput').value = addressData.pinCode || '';
      }

      // Define validateForm function
      function validateForm() {
  const validations = [
    {
      field: 'houseInput',
      label: 'House',
      // Allows letters, numbers, spaces, #, -, /, and common punctuation
      pattern: /^[a-zA-Z0-9\s#\/\-,\.]{2,50}$/,
      error: 'House number should contain only letters, numbers, spaces, and common symbols (#-/,.) between 2-50 characters'
    },
    {
      field: 'streetInput',
      label: 'Street',
      // Allows letters, numbers, spaces, and common street suffixes
      pattern: /^[a-zA-Z0-9\s\-,\.]{3,50}$/,
      error: 'Street should contain only letters, numbers, spaces, and basic punctuation between 3-50 characters'
    },
    {
      field: 'landmarkInput',
      label: 'Landmark',
      // Allows letters, numbers, spaces, and basic punctuation
      pattern: /^[a-zA-Z0-9\s\-,\.]{3,100}$/,
      error: 'Landmark should contain only letters, numbers, spaces, and basic punctuation between 3-100 characters'
    },
    {
      field: 'cityInput',
      label: 'City',
      // Allows only letters and spaces
      pattern: /^[a-zA-Z\s]{2,50}$/,
      error: 'City should contain only letters and spaces between 2-50 characters'
    },
    {
      field: 'districtInput',
      label: 'District',
      // Allows only letters and spaces
      pattern: /^[a-zA-Z\s]{2,50}$/,
      error: 'District should contain only letters and spaces between 2-50 characters'
    },
    {
      field: 'stateInput',
      label: 'State',
      // Allows only letters and spaces
      pattern: /^[a-zA-Z\s]{2,50}$/,
      error: 'State should contain only letters and spaces between 2-50 characters'
    },
    {
      field: 'countryInput',
      label: 'Country',
      // Allows only letters and spaces
      pattern: /^[a-zA-Z\s]{2,50}$/,
      error: 'Country should contain only letters and spaces between 2-50 characters'
    },
    {
      field: 'pinCodeInput',
      label: 'PIN Code',
      // Allows 6 digits (India PIN code format) or international format up to 10 digits
      pattern: /^[0-9]{6,10}$/,
      error: 'PIN Code should contain 6-10 digits only'
    }
  ];

  for (const validation of validations) {
    const input = document.getElementById(validation.field);
    const value = input.value.trim();

    // Check if field is empty
    if (!value) {
      Swal.fire({
        icon: 'error',
        title: `${validation.label} is required`,
        text: 'Please fill in all required fields'
      });
      input.focus();
      return false;
    }

    // Check if value matches the pattern
    if (!validation.pattern.test(value)) {
      Swal.fire({
        icon: 'error',
        title: `Invalid ${validation.label}`,
        text: validation.error
      });
      input.focus();
      return false;
    }
  }

  return true;
}

//=================================================>

function cancelButton(){
    window.location.reload();
    // console.log("cancel button------------------------------------------->");
}


//================================>
async function saveAddress() {
    if (!validateForm()) return;

    const formData = new FormData(addressForm);
    const addressData = Object.fromEntries(formData.entries());
    const addressId = addressData.id;

    const url = addressId ? `/address/${addressId}` : '/address/create';
    const method = addressId ? 'PUT' : 'POST';

    const payload = {
        house: addressData.house,
        street: addressData.street,
        landmark: addressData.landmark,
        city: addressData.city,
        district: addressData.district,
        state: addressData.state,
        country: addressData.country,
        pinCode: addressData.pinCode
    };

    

    try {
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();

        // Show success message and wait for it to be closed
        await Swal.fire({
            icon: 'success',
            title: data.message,
            text: 'Done!',
        });

        // Reload the page after the modal is closed
        location.reload();
    } catch (error) {
        console.error('Error:', error);

        // Show error message and wait for it to be closed
        await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while saving the address',
        });
    }
}

     


//==================================================>


      function removeAddress(addressId) {
        Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to remove this address?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, remove it!',
          cancelButtonText: 'Cancel'
        }).then((result) => {
          if (result.isConfirmed) {
            // Proceed with the backend request if confirmed
            fetch(`/address/${addressId}`, {
                method: 'DELETE'
              })
              .then(response => {
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                return response.json();
              })
              .then(data => {
                Swal.fire({
                  icon: 'success',
                  title: 'Deleted!',
                  text: data.message,
                }).then(() => {
                  location.reload();
                });
              })
              .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'An error occurred while removing the address.',
                });
              });
          } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire({
              icon: 'info',
              title: 'Cancelled',
              text: 'The address was not removed.',
            });
          }
        });
      }

      window.cancelButton=cancelButton;
      window.prepareModal = prepareModal;
      window.saveAddress = saveAddress;
      window.removeAddress = removeAddress;
    });
  </script>



</body>

</html>