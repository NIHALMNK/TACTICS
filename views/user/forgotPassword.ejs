<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Reset - Secure Account Recovery</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #858796;
            --success-color: #1cc88a;
            --error-color: #e74a3b;
        }

        body {
            background-color: #f8f9fc;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .main-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .forgot-password-container {
            width: 100%;
            max-width: 500px;
            padding: 2.5rem;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            background: white;
            transition: transform 0.3s ease;
        }

        .forgot-password-container:hover {
            transform: translateY(-5px);
        }

        .steps {
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .steps.active {
            display: block;
            opacity: 1;
        }

        .progress-container {
            margin-bottom: 2rem;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            position: relative;
            margin-bottom: 30px;
        }

        .progress-steps::before {
            content: "";
            background-color: #e9ecef;
            position: absolute;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            height: 4px;
            width: 100%;
            z-index: 0;
        }

        .progress-step-item {
            background-color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 3px solid #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            z-index: 1;
            position: relative;
            transition: all 0.3s ease;
        }

        .progress-step-item.active {
            border-color: var(--primary-color);
            background-color: var(--primary-color);
            color: white;
        }

        .progress-step-item.completed {
            border-color: var(--success-color);
            background-color: var(--success-color);
            color: white;
        }

        .otp-inputs {
            display: flex;
            gap: 0.8rem;
            justify-content: center;
            margin: 1.5rem 0;
        }

        .otp-inputs input {
            width: 45px;
            height: 45px;
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            border: 2px solid #ddd;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .otp-inputs input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }

        .resend-container {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }

        .timer {
            color: var(--secondary-color);
            font-size: 0.9rem;
            margin-bottom: 0.8rem;
        }

        .resend-link {
            color: var(--primary-color);
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .resend-link:hover:not(.disabled) {
            color: #2e59d9;
            text-decoration: underline;
        }

        .resend-link.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .password-requirements {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #f8f9fc;
            border-radius: 8px;
        }

        .requirement-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            color: var(--secondary-color);
            font-size: 0.9rem;
        }

        .requirement-item i {
            font-size: 0.8rem;
        }

        .requirement-item.valid {
            color: var(--success-color);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #2e59d9;
            border-color: #2e59d9;
            transform: translateY(-1px);
        }

        .form-control {
            padding: 0.75rem 1rem;
            border-radius: 8px;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }
    </style>
</head>
<body>
    <%- include('./layout/NAV.ejs') %>

    <div class="main-container">
        <div class="forgot-password-container">
            <div class="progress-container">
                <div class="progress-steps">
                    <div class="progress-step-item active" id="step1">1</div>
                    <div class="progress-step-item" id="step2">2</div>
                    <div class="progress-step-item" id="step3">3</div>
                </div>
            </div>

            <!-- Email Step -->
            <div class="steps active" id="emailStep">
                <h2 class="text-center mb-4">Reset Your Password</h2>
                <p class="text-muted text-center">Enter your email address to receive a verification code</p>
                
                <form id="emailForm">
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-envelope"></i>
                            </span>
                            <input type="email" class="form-control" id="email" 
                                   placeholder="Enter your email" required
                                   pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$">
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-paper-plane me-2"></i>Send Verification Code
                    </button>
                </form>
            </div>
            
            <!-- OTP Step -->
            <div class="steps" id="otpStep">
                <h2 class="text-center mb-4">Verify Your Email</h2>
                <p class="text-muted text-center">
                    We've sent a verification code to
                    <strong id="maskedEmail"></strong>
                </p>
                
                <form id="otpForm">
                    <div class="otp-inputs" role="group" aria-label="Enter verification code">
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                        <input type="text" maxlength="1" inputmode="numeric" pattern="[0-9]" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-check-circle me-2"></i>Verify Code
                    </button>
                    
                    <div class="resend-container">
                        <div class="timer">
                            Time remaining: <span id="countdown">03:00</span>
                        </div>
                        <div>
                            <span class="text-muted">Didn't receive the code?</span>
                            <a class="resend-link disabled" id="resendLink">
                                <i class="fas fa-redo-alt me-1"></i>Resend Code
                            </a>
                        </div>
                    </div>
                </form>
            </div>
            
            <!-- Password Step -->
            <div class="steps" id="passwordStep">
                <h2 class="text-center mb-4">Create New Password</h2>
                <p class="text-muted text-center">Your new password must meet the following requirements</p>
                
                <form id="passwordForm">
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-lock"></i>
                            </span>
                            <input type="password" class="form-control" id="newPassword" 
                                   placeholder="New password" required minlength="8">
                            <button type="button" class="btn btn-outline-secondary" id="togglePassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-lock"></i>
                            </span>
                            <input type="password" class="form-control" id="confirmPassword" 
                                   placeholder="Confirm password" required minlength="8">
                            <button type="button" class="btn btn-outline-secondary" id="toggleConfirmPassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>

                    <div class="password-requirements">
                        <div class="requirement-item" data-requirement="length">
                            <i class="fas fa-circle"></i>
                            At least 8 characters long
                        </div>
                        <div class="requirement-item" data-requirement="uppercase">
                            <i class="fas fa-circle"></i>
                            Contains uppercase letter
                        </div>
                        <div class="requirement-item" data-requirement="lowercase">
                            <i class="fas fa-circle"></i>
                            Contains lowercase letter
                        </div>
                        <div class="requirement-item" data-requirement="number">
                            <i class="fas fa-circle"></i>
                            Contains number
                        </div>
                        <div class="requirement-item" data-requirement="special">
                            <i class="fas fa-circle"></i>
                            Contains special character
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mt-4">
                        <i class="fas fa-key me-2"></i>Reset Password
                    </button>
                </form>
            </div>
        </div>
    </div>

    <%- include('./layout/FOOTER.ejs') %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const emailForm = document.getElementById('emailForm');
            const otpForm = document.getElementById('otpForm');
            const passwordForm = document.getElementById('passwordForm');
            const resendLink = document.getElementById('resendLink');
            const countdown = document.getElementById('countdown');
            const maskedEmail = document.getElementById('maskedEmail');
            let resendTimer;
            let userEmail = '';

            // Password toggle functionality
            document.querySelectorAll('#togglePassword, #toggleConfirmPassword').forEach(toggle => {
                toggle.addEventListener('click', (e) => {
                    const input = e.currentTarget.previousElementSibling;
                    const icon = e.currentTarget.querySelector('i');
                    
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.replace('fa-eye', 'fa-eye-slash');
                    } else {
                        input.type = 'password';
                        icon.classList.replace('fa-eye-slash', 'fa-eye');
                    }
                });
            });

            // Password validation
            const passwordRequirements = {
                length: str => str.length >= 8,
                uppercase: str => /[A-Z]/.test(str),
                lowercase: str => /[a-z]/.test(str),
                number: str => /[0-9]/.test(str),
                special: str => /[!@#$%^&*]/.test(str)
            };

            function validatePassword(password) {
                let isValid = true;
                Object.entries(passwordRequirements).forEach(([requirement, validator]) => {
                    const element = document.querySelector(`[data-requirement="${requirement}"]`);
                    if (validator(password)) {
                        element.classList.add('valid');
                        element.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        element.classList.remove('valid');
                        element.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                        isValid = false;
                    }
                });
                return isValid;
            }

            document.getElementById('newPassword').addEventListener('input', (e) => {
                validatePassword(e.target.value);
            });

            function maskEmail(email) {
                const [username, domain] = email.split('@');
                const maskedUsername = username.charAt(0) + 
                    '*'.repeat(username.length - 2) + 
                    username.charAt(username.length - 1);
                return `${maskedUsername}@${domain}`;
            }

            function startResendTimer() {
                let timeLeft = 60;
                resendLink.classList.add('disabled');
                
                clearInterval(resendTimer);
                resendTimer = setInterval(() => {
                    timeLeft--;
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    countdown.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                    
                    if (timeLeft <= 0) {
                        clearInterval(resendTimer);
                        resendLink.classList.remove('disabled');
                    }
                }, 1000);
            }

            function updateProgressSteps(currentStep) {
                const steps = {
                    'emailStep': 1,
                    'otpStep': 2,
                    'passwordStep': 3
                };
                
                const stepNumber = steps[currentStep];
                document.querySelectorAll('.progress-step-item').forEach((item, index) => {
                    if (index + 1 < stepNumber) {
                        item.classList.add('completed');
                        item.classList.remove('active');
                    } else if (index + 1 === stepNumber) {
                        item.classList.add('active');
                        item.classList.remove('completed');
                    } else {
                        item.classList.remove('active', 'completed');
                    }
                });
            }

            function showStep(stepId) {
                const steps = document.querySelectorAll('.steps');
                steps.forEach(step => {
                    if (step.id === stepId) {
                        step.classList.add('active');
                        setTimeout(() => step.style.opacity = '1', 50);
                    } else {
                        step.style.opacity = '0';
                        setTimeout(() => step.classList.remove('active'), 300);
                    }
                });
                updateProgressSteps(stepId);
            }

            // Handle email submission
            emailForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                userEmail = emailForm.email.value;
                
                try {
                    const response = await fetch('/forgot-password/send-otp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email: userEmail })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        maskedEmail.textContent = maskEmail(userEmail);
                        showStep('otpStep');
                        startResendTimer();
                        Swal.fire({
                            icon: 'success',
                            title: 'Code Sent Successfully!',
                            text: 'Please check your email for the verification code',
                            timer: 2000,
                            showConfirmButton: false,
                            customClass: {
                                popup: 'animated fadeInDown'
                            }
                        });
                    } else {
                        throw new Error(data.message || 'Failed to send verification code');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Something went wrong! Please try again.',
                        confirmButtonColor: '#4e73df'
                    });
                }
            });

            
            const otpInputs = otpForm.querySelectorAll('input');
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    if (e.inputType === "deleteContentBackward") return;
                    
                    const value = e.target.value;
                    if (value) {
                        e.target.value = value.slice(-1);
                        if (index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        }
                    }
                });

                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Backspace' && !input.value && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });

                input.addEventListener('paste', (e) => {
                    e.preventDefault();
                    const pastedData = e.clipboardData.getData('text').slice(0, otpInputs.length);
                    
                    otpInputs.forEach((input, i) => {
                        if (pastedData[i]) {
                            input.value = pastedData[i];
                        }
                    });
                    
                    if (otpInputs[otpInputs.length - 1].value) {
                        otpForm.dispatchEvent(new Event('submit'));
                    }
                });
            });

            
            resendLink.addEventListener('click', async () => {
                if (resendLink.classList.contains('disabled')) return;
                
                try {
                    const response = await fetch('/forgot-password/resend-otp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email: userEmail })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        startResendTimer();
                        Swal.fire({
                            icon: 'success',
                            title: 'New Code Sent!',
                            text: 'Please check your email for the new verification code',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        throw new Error(data.message || 'Failed to resend code');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to resend verification code',
                        confirmButtonColor: '#4e73df'
                    });
                }
            });

          
            otpForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const otp = Array.from(otpInputs)
                    .map(input => input.value)
                    .join('');
                    
                try {
                    const response = await fetch('/forgot-password/verify-otp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email: userEmail, otp })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        showStep('passwordStep');
                        clearInterval(resendTimer);
                    } else {
                        throw new Error(data.message || 'Invalid verification code');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Verification Failed',
                        text: error.message || 'Please check the code and try again',
                        confirmButtonColor: '#4e73df'
                    });
                }
            });

            
            passwordForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const newPassword = passwordForm.newPassword.value;
                const confirmPassword = passwordForm.confirmPassword.value;

                if (!validatePassword(newPassword)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Password',
                        text: 'Please make sure your password meets all requirements',
                        confirmButtonColor: '#4e73df'
                    });
                    return;
                }

                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Password Mismatch',
                        text: 'The passwords you entered do not match',
                        confirmButtonColor: '#4e73df'
                    });
                    return;
                }
                
                try {
                    const response = await fetch('/forgot-password/reset', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            email: userEmail,
                            password: newPassword 
                        })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Password Reset Successful!',
                            text: 'You can now log in with your new password',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            window.location.href = '/login';
                        });
                    } else {
                        throw new Error(data.message || 'Failed to reset password');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to reset password. Please try again.',
                        confirmButtonColor: '#4e73df'
                    });
                }
            });
        });
    </script>
</body>
</html>