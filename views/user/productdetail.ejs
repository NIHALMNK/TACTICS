<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tactics</title>
  <link rel="icon" type="image/x-icon" href="/images/produts-tactics/LOGO/3.png">

  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/user/productDetail.css">
  <style>
    .wishlist-btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 12px 24px;
      background-color: #ffffff;
      border: 2px solid #e5e7eb;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: Arial, sans-serif;
      font-size: 16px;
      font-weight: 500;
      color: #374151;
    }

    .wishlist-btn:hover {
      background-color: #fee2e2;
      border-color: #fecdd3;
      color: #e11d48;
    }

    .heart-icon {
      fill: transparent;
      stroke: currentColor;
      stroke-width: 2;
      width: 20px;
      height: 20px;
      transition: all 0.3s ease;
    }

    .wishlist-btn:hover .heart-icon {
      transform: scale(1.1);
    }

    .wishlist-btn.active {
      background-color: #ffe4e6;
      border-color: #fecdd3;
      color: #e11d48;
    }

    .wishlist-btn.active .heart-icon {
      fill: #e11d48;
      stroke: #e11d48;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }

      50% {
        transform: scale(1.1);
      }

      100% {
        transform: scale(1);
      }
    }

    .wishlist-btn:active .heart-icon {
      animation: pulse 0.3s ease;
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <%- include('./layout/NAV.ejs') %>

  <!-- Product Details Section -->
  <div class="container py-5">
    <!-- Breadcrumb -->
    <div class="row mb-4">
      <div class="col-12">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/home">Home</a></li>
            <li class="breadcrumb-item"><a href="/shop"><%= product.category.name %></a></li>
            <li class="breadcrumb-item active" aria-current="page"><%= product.name %></li>
          </ol>
        </nav>
      </div>
    </div>

    <!-- Main Product Content -->
    <div class="row">
      <!-- Product Images -->
      <div class="col-md-6 mb-4">
        <div class="card">
          <span class="product-badge badge-new"><%= product.badge %></span>
          <div class="img-magnifier-container">
            <div class="product-image-wrapper">
              <a href=""><img src="<%= product.images[0] %>" alt="Product Image" id="productImage" class="card-img-top product-image"></a>
              <div class="img-magnifier-glass"></div>
            </div>
          </div>
          <div class="card-body">
            <div class="row mt-3">
              <% product.images.forEach((img, index) => { %>
              <div class="col-3">
                <img src="<%= img %>" alt="Thumbnail <%= index + 1 %>" class="img-thumbnail thumbnail">
              </div>
              <% }) %>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Details -->
      <div class="col-md-6">

        <% if (product.stockManagement.reduce((total, item) => total + item.quantity, 0) >100) { %>

        <h2 class="product-title mb-3"><b><%= product.name %></b></h2>


        <% } else { %>
        <p><b><%= product.name %></b></p>
        <h2 class="product-title mb-3"><b>limited stock</b></h2>

        <% } %>
        <div class="d-flex align-items-center mb-3">
          <div class="rating me-2">
            <% for (let i = 0; i < product.rating; i++) { %>
            <i class="fas fa-star"></i>
            <% } %>
            <% for (let i = product.rating; i < 5; i++) { %>
            <i class="far fa-star"></i>
            <% } %>
          </div>


          <!-- <span class="text-muted">(Reviews)  </span> -->
        </div>

        <div class="mb-3">
          <% if (product.offerPrice && product.offerPrice < product.price) { %>
          <h2 class="h4 text-danger">
            ₹<%= product.offerPrice.toFixed(2) %>
          </h2>
          <h4 class="text-muted text-decoration-line-through">
            ₹<%= product.price.toFixed(2) %>
          </h4>
          <% } else { %>
          <h2 class="h4">
            ₹<%= product.price.toFixed(2) %>
          </h2>
          <% } %>
        </div>

        <!---------total stock----------->
        <p class="availability mb-3">
          <i class="fas fa-check-circle"></i>
          <span id="totalStock">
            <%= product.stockManagement.reduce((total, item) => total + item.quantity, 0) %>
          </span>
          Items in Stock
        </p>




        <!-- Description -->
        <p class="product-description"><%= product.description %></p>

        <h1></h1>
        <!----------wishlis-------------------->
        <button class="wishlist-btn" onclick="wishlistItemAdd(event)">
          <svg class="heart-icon" viewBox="0 0 24 24">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
          </svg>

        </button>
        <!------------------------------>

        <h1></h1>

        <!-- Size Selector -->
        <div class="btn-group" role="group">
          <% product.stockManagement.forEach(stock => { %>
          <input type="radio" class="btn-check" name="size" id="size-<%= stock.size %>" autocomplete="off" data-stock="<%= stock.quantity %>">
          <label class="btn btn-outline-secondary" for="size-<%= stock.size %>"><%= stock.size %></label>
          <% }) %>
        </div>
        <h1></h1>
        <!-- Quantity Selector -->
        <div class="mb-4">
          <h3 class="h5">Quantity:</h3>
          <div class="d-flex align-items-center">
            <div class="input-group me-3" style="width: 130px;">
              <button class="btn btn-outline-secondary" type="button" id="decrease">-</button>
              <input type="number" class="form-control text-center" value="1" min="1" id="quantity" readonly>
              <button class="btn btn-outline-secondary" type="button" id="increase">+</button>
            </div>
            <span class="text-muted">
              Available: <span id="currentStock">0</span> in stock
            </span>
          </div>
        </div>





        <!-- Buy Now Button -->
        <button class="btn btn-primary" id="addToCartBtn">Add to Cart</button>
      </div>
    </div>
  </div>
  <!-- Reviews Section -->
  <div class="row mt-5">
    <div class="col-12">
      <h3 class="mb-4 text-center">Customer Reviews</h3>
    </div>
  </div>



  <!-- Related Products -->
  <div class="container mt-5">
    <h3>Related Products</h3>
    <div class="row">
      <% if (relatedProducts && relatedProducts.length > 0) { %>
      <% relatedProducts.forEach((related) => { %>
      <div class="col-md-3 mb-4 d-flex justify-content-center">
        <div class="related-product-card card">
          <% if (related.discount) { %>
          <div class="related-discount-badge"><%= related.discount %>% OFF</div>
          <% } %>

          <a href="/product-detail/<%= related._id %>">
            <img src="<%= related.images[0] %>" alt="<%= related.name %>" class="related-product-image related-main-image">
            <img src="<%= related.images[1] || related.images[0] %>" alt="<%= related.name %> Back" class="related-product-image related-hover-image">
          </a>

          <div class="related-product-details">
            <h5 class="card-title"><%= related.name %></h5>
            <div class="d-flex justify-content-between">
              <span class="text-danger fw-bold">
                ₹<%= (related.offerPrice || related.price).toFixed(2) %>
              </span>

              <% if (related.price) { %>
              <span class="text-muted text-decoration-line-through">$<%= related.price.toFixed(2) %></span>
              <% } %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
      <% } else { %>
      <div class="col-12">
        <p class="text-center">No related products available at the moment. Check back later!</p>
      </div>

      <% } %>
    </div>
  </div>


  <!-- Footer -->

  <%- include('./layout/FOOTER.ejs') %>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {


      // Thumbnail click handler
      document.querySelectorAll('.thumbnail').forEach(thumb => {
        thumb.addEventListener('click', () => {
          document.querySelector('.product-image').src = thumb.src;
        });
      });

      // Magnifier functionality
      const productImage = document.getElementById('productImage');
      const magnifierGlass = document.querySelector('.img-magnifier-glass');
      const zoomLevel = 2;

      function setupMagnifier() {
        magnifierGlass.style.backgroundImage = `url('${productImage.src}')`;
        magnifierGlass.style.backgroundRepeat = 'no-repeat';
        magnifierGlass.style.backgroundSize = `${productImage.width * zoomLevel}px ${productImage.height * zoomLevel}px`;

        productImage.parentElement.addEventListener('mousemove', moveMagnifier);
        productImage.parentElement.addEventListener('mouseenter', () => {
          magnifierGlass.style.display = 'block';
        });
        productImage.parentElement.addEventListener('mouseleave', () => {
          magnifierGlass.style.display = 'none';
        });
      }

      function moveMagnifier(e) {
        const rect = productImage.getBoundingClientRect();
        const x = e.pageX - rect.left - window.pageXOffset;
        const y = e.pageY - rect.top - window.pageYOffset;

        const glassHalfWidth = magnifierGlass.offsetWidth / 2;
        const glassHalfHeight = magnifierGlass.offsetHeight / 2;


        let posX = x - glassHalfWidth;
        let posY = y - glassHalfHeight;


        posX = Math.max(0, Math.min(posX, productImage.width - magnifierGlass.offsetWidth));
        posY = Math.max(0, Math.min(posY, productImage.height - magnifierGlass.offsetHeight));

        magnifierGlass.style.left = `${posX}px`;
        magnifierGlass.style.top = `${posY}px`;


        const bgPosX = -(x * zoomLevel - glassHalfWidth);
        const bgPosY = -(y * zoomLevel - glassHalfHeight);

        magnifierGlass.style.backgroundPosition = `${bgPosX}px ${bgPosY}px`;
      }

      productImage.addEventListener('load', setupMagnifier);
      setupMagnifier();

    });

    //-------------------------------------------------------------->

    document.addEventListener('DOMContentLoaded', () => {
      const quantityInput = document.getElementById('quantity');
      const increaseBtn = document.getElementById('increase');
      const decreaseBtn = document.getElementById('decrease');

      const maxStock = parseInt(quantityInput.getAttribute('max'));

      increaseBtn.addEventListener('click', () => {
        const maxStock = parseInt(quantityInput.getAttribute('max'));
        const currentValue = parseInt(quantityInput.value);


        if (currentValue < maxStock) {
          // Increment the value only if it's less than maxStock
          quantityInput.value = currentValue + 1;
        } else {

          Swal.fire('Wait!', 'Cannot exceed available stock!', 'error');

        }

        if (10 <= currentValue) {
          quantityInput.value = currentValue;
          Swal.fire('Wait!', 'Cannot exceed more than 10 stock!', 'error');

        }



      });

      // Handle "Decrease" button click
      decreaseBtn.addEventListener('click', () => {
        let currentValue = parseInt(quantityInput.value);

        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        } else {
          Swal.fire('Wait!', "cannot decrease !", "failed");
        }
      });

    });

    //======================================>

   

    document.querySelectorAll('.related-cart-icon').forEach(icon => {
      icon.addEventListener('click', function() {
        alert('Added to cart!');
      });
    });

    //======================================>
    //======================================>
    document.addEventListener('DOMContentLoaded', () => {
      const sizeInputs = document.querySelectorAll('input[name="size"]');
      const currentStockElement = document.getElementById('currentStock');
      const quantityInput = document.getElementById('quantity');

      // Initialize stock and quantity
      let selectedStock = 0;
      quantityInput.setAttribute('max', '1');
      quantityInput.value = 1;

      sizeInputs.forEach(input => {
        input.addEventListener('change', () => {
          selectedStock = parseInt(input.getAttribute('data-stock'));

          // Update stock display
          currentStockElement.textContent = selectedStock;

          // Update max quantity
          quantityInput.setAttribute('max', selectedStock);
          quantityInput.value = Math.min(quantityInput.value, selectedStock);

          // Show alert if stock is 0
          if (selectedStock === 0) {
            Swal.fire({
              icon: 'info',
              title: 'Out of Stock',
              text: 'This product is currently out of stock. Please check back later.',
              confirmButtonColor: '#3085d6'
            });
          }
        });
      });

      // Quantity increase/decrease logic
      const increaseBtn = document.getElementById('increase');
      const decreaseBtn = document.getElementById('decrease');

      increaseBtn.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value);

        if (currentValue < selectedStock) {
          quantityInput.value = currentValue;
        } else {
          Swal.fire('Wait!', 'Cannot exceed available stock!', 'error');
        }
      });

      decreaseBtn.addEventListener('click', () => {
        let currentValue = parseInt(quantityInput.value);

        if (currentValue > 1) {
          quantityInput.value = currentValue;
        } else {
          Swal.fire('Wait!', "Cannot decrease!", "error");
        }
      });
    });

    document.addEventListener('DOMContentLoaded', () => {
      const addToCartBtn = document.getElementById('addToCartBtn');
      const sizeInputs = document.querySelectorAll('input[name="size"]');
      const quantityInput = document.getElementById('quantity');

      // Event listener for Add to Cart button
      addToCartBtn.addEventListener('click', async () => {
        const selectedSize = Array.from(sizeInputs).find(input => input.checked)?.id.split('-')[1];
        const quantity = parseInt(quantityInput.value);
        const productId = '<%= product._id %>';
        const userId = '<%= user%>';



        if (!userId) {
          Swal.fire('Error!', 'Please login to add items to cart.', 'error');
          setTimeout(() => {
            window.location.href = '/login';
          }, 2000);
          return;
        }

        if (!selectedSize) {
          Swal.fire('Wait!', 'Please select a size first!', 'error');
          return;
        }

        if (!quantity || isNaN(quantity) || quantity <= 0) {
          Swal.fire('Invalid Input', 'Please enter a valid quantity.', 'error');
          return;
        }



        try {
          // First, check stock availability
          const stockResponse = await fetch('/product-detail/get-stock', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              itemId: productId,
              size: selectedSize,
              quantity: quantity,
            }),
          });



          if (!stockResponse.ok) {
            throw new Error('Failed to fetch stock details.');
          }

          const stockData = await stockResponse.json();
          // console.log('stockData:', stockData);

          if (!stockData.success) {
            Swal.fire('Error!', stockData.message, 'error');
            return;
          }

          if (stockData.stock < quantity) {
            Swal.fire('Stock Alert!', `Sorry, only ${stockData.stock} items are available for size ${selectedSize}.`, 'info');
            return;
          }



          // Now, proceed to add the item to the cart
          const response = await fetch('/product-detail/add-to-cart', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              productId: productId,
              size: selectedSize,
              quantity: quantity,
            }),
          });

          if (!response.ok) {
            throw new Error('Failed to add item to cart.');
          }

          const data = await response.json();
          // console.log('addToCart Response:', data);
          if (data.success) {
            Swal.fire('Success!', 'Item added to cart!', 'success');
          } else {
            Swal.fire('Error!', data.message, 'error');
          }
        } catch (error) {
          console.error('Error:', error.message || error);
          Swal.fire('Error!', 'There was an issue adding the item to the cart.', 'error');
        }
      });
    });

    //==============================================================================================>
    async function wishlistItemAdd(e) {
      try {

        const sizeInputs = document.querySelectorAll('input[name="size"]');
        const userId = '<%= user%>';


        if (!userId) {
          Swal.fire('Error!', 'Please login to add items to cart.', 'error');
          setTimeout(() => {
            window.location.href = '/login';
          }, 2000);
          return;
        }



        console.log('HII')
        // e.classList.toggle('active')

        const selectedSize = Array.from(sizeInputs).find(input => input.checked)?.id.split('-')[1];

        if (!selectedSize) {
          Swal.fire('Wait!', 'Please select a size first!', 'error');
          return;
        }


        const productId = '<%= product._id %>';

        const response = await fetch('/addWishlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            selectedSize,
            productId
          })

        })
        const data = await response.json();

        if (data.success) {
          Swal.fire('Success!', 'Item added to wishlist !', 'success');
        } else {
          Swal.fire('Error!', data.message, 'error');
        }



      } catch (error) {
        console.error('Error:', error.message || error);
        Swal.fire('Error!', 'There was an issue adding the item to the wishlist.', 'error');

      }




    }




    // });
  </script>
</body>

</html>