<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tactics</title>
    <link rel="icon" type="image/x-icon" href="/images/produts-tactics/LOGO/3.png">


  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css" rel="stylesheet">


  <link rel="stylesheet" href="/css/user/order.css">
  
</head>

<body>

  <!-------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
  <%- include('./layout/NAV.ejs') %>
  <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->


  <div class="profile-session-container">
    <div class="container-fluid">
      <div class="dashboard">
        <!-- Sidebar -->
        <div class="sidebar">
          <a href="/dashboard" class="w-100">
            <button class="nav-button w-100">dashboard</button>
          </a>
          <a href="/order" class="w-100">
            <button class="nav-button active w-100">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Orders
            </button>
          </a>
          <a href="/profile" class="w-100">
            <button class="nav-button w-100">Update Profile</button>
          </a>
          <a href="/address" class="w-100">
            <button class="nav-button w-100">My Address</button>
          </a>
          <a href="/wallet" class="w-100">
            <button class="nav-button w-100">Wallet</button>
          </a>
          <a href="/logout" class="w-100">
            <button class="nav-button w-100">Logout</button>
          </a>
        </div>

        <!-- Main Content -->
        <div class="main-content">
          <h2 class="section-title">Your Orders</h2>
          <% if (orders && orders.length > 0) { %>
          <% orders.forEach(order => { %>
          <div class="order-card">
            <div class="order-header">
              <a href="#" class="order-id">Order ID: #<%= order.orderId %></a>
              <span class="order-status status-<%= order.status.toLowerCase() %>">
                <%= order.status %>
              </span>
            </div>

            <div class="order-amount">
              Total Amount: â‚¹<%= order.total %>
            </div>

            <div class="order-actions">
              <button class="btn btn-view" data-bs-toggle="modal" data-bs-target="#orderModal<%= order.orderId %>">
                View Order
              </button>

              <% if (order.status.toLowerCase() === 'pending') { %>

              <button class="btn btn-cancel">Cancel Order</button>

              <% } %>

              <% if (order.status.toLowerCase() === 'completed') { %>
              <button class="btn btn-return">Return Order</button>
              <% } %>

              <% if (order.paymentStatus.toLowerCase() === 'failed' && order.paymentMethod === 'razorpay' && order.status!='Cancelled'  ){ %>
                <button class="btn btn-retry">Retry Payment</button>
              <% } %>

              <button class="btn btn-pdf" onclick="downloadPDF(('<%= order.orderId %>'))" >Get PDF Receipt</button>
            </div>
          </div>
<!-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -->
          <!-- Order Details Modal -->
          <div class="modal fade" id="orderModal<%= order.orderId %>" tabindex="-1">
            <div class="modal-dialog modal-lg">
              <div class="modal-content">
                <div class="modal-header border-bottom-0">
                  <h5 class="modal-title fs-4">Order Details</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                  <div class="container">
                    <!-- Order ID and Status Section -->
                    <div class="mb-4">
                      <div class="d-flex justify-content-between align-items-start">
                        <div>
                          <p class="text-muted mb-1">Order ID:</p>
                         
                          <p class="fw-bold fs-5">#<%= order.orderId %></p> 
                        </div>
                        <div>
                          <p class="text-muted mb-1">Status:</p>
                          <span class="badge rounded-pill <%= order.status.toLowerCase() === 'pending' ? 'bg-warning' : 'bg-success' %>">
                            <%= order.status %>
                          </span>
                        </div>
                      </div>
                    </div>

                    <!-- Total Amount and Payment Section -->
                    <div class="row mb-4">
                      <div class="col-md-6">
                        <p class="text-muted mb-1">Total Amount:</p>
                        <p class="fw-bold">Rs. <%= order.total %></p>
                      </div>
                      <div class="col-md-6">
                        <p class="text-muted mb-1">Payment Method:</p>
                        <p class="fw-bold"><%= order.paymentMethod %></p>
                      </div>
                    </div>

                    <!-- Items Section -->
                    <div class="mb-4">
                      <h6 class="fw-bold mb-3">Items:</h6>
                      <% order.items.forEach(item => { %>
                      <div class="card mb-3">
                        <div class="card-body">
                          <div class="row align-items-center">
                            <div class="col-md-8">
                              <h6 class="card-title mb-1"><%= item.name %></h6>
                              <p class="card-text text-muted">
                                Quantity: <%= item.quantity %>
                              </p>
                              <p class="card-text text-muted">
                                Size: <%= item.size %>
                              </p>
                            </div>
                            <div class="col-md-4 text-end">
                              <p class="fw-bold mb-0">Rs. <%= item.price %></p>
                            </div>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                    </div>

                    <!---Add address-->
                    <!-- Shipping Address Section -->
                    <div class="mb-4">
                      <h6 class="fw-bold mb-3">Shipping Address</h6>
                      <div class="card">
                        <div class="card-body">
                          <% if (order.shippingAddress) { %>
                          <p class="mb-1"><strong>House/Building:</strong> <%= order.shippingAddress.house %></p>
                          <p class="mb-1"><strong>Street:</strong> <%= order.shippingAddress.street %></p>
                          <p class="mb-1"><strong>City:</strong> <%= order.shippingAddress.city %></p>
                          <p class="mb-1"><strong>District:</strong> <%= order.shippingAddress.district %></p>
                          <p class="mb-1"><strong>State:</strong> <%= order.shippingAddress.state %></p>
                          <% if (order.shippingAddress.landmark) { %>
                          <p class="mb-1"><strong>Landmark:</strong> <%= order.shippingAddress.landmark %></p>
                          <% } %>
                          <p class="mb-0"><strong>PIN Code:</strong> <%= order.shippingAddress.pinCode %></p>
                          <% } else { %>
                          <p class="mb-0 text-muted">Address details not available</p>
                          <% } %>
                        </div>
                      </div>
                    </div>

                    <!-- Order Summary -->
                    <div class="card bg-light">
                      <div class="card-body">
                        <h6 class="fw-bold mb-3">Order Summary</h6>
                        <div class="d-flex justify-content-between mb-2">
                          <span>Subtotal:</span>
                          <span>Rs. <%= order.subtotal %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                          <span>Shipping:</span>
                          <span>Rs. <%= order.shipping %></span>
                        </div>
                        <% if (order.discount) { %>
                        <div class="d-flex justify-content-between mb-2">
                          <span>Discount:</span>
                          <span>-Rs. <%= order.discount %></span>
                        </div>
                        <% } %>
                        <div class="d-flex justify-content-between fw-bold mt-2 pt-2 border-top">
                          <span>Total:</span>
                          <span>Rs. <%= order.total %></span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <% }); %>
          <% } else { %>
          <tr>
            <td colspan="6" class="text-center">No orders found</td>
          </tr>
          <% } %>
          </tbody>
          </table>
        </div>
      </div>

      <!-- In your orders section, after the order list -->
<% if (totalPages > 1) { %>
  <div class="pagination">
      <% if (hasPrevPage) { %>
          <a href="?page=<%= currentPage - 1 %>" class="btn btn-secondary">Previous</a>
      <% } %>
      
      <% for(let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : 'btn-outline-secondary' %>">
              <%= i %>
          </a>
      <% } %>
      
      <% if (hasNextPage) { %>
          <a href="?page=<%= currentPage + 1 %>" class="btn btn-secondary">Next</a>
      <% } %>
  </div>
  <% } %>


      <!---------------->
    </div>
  </div>
  </div>


  <!------footer------->
  <%- include('./layout/FOOTER.ejs') %>
  <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->




  <!-- Bootstrap JS and Dependencies -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
   
    document.addEventListener('DOMContentLoaded', function() {
      initializeOrderButtons();
      initializeTooltips();
      initializeModals();
    });

    function initializeOrderButtons() {
      const viewButtons = document.querySelectorAll('.btn-view');
      viewButtons.forEach(button => {
        button.addEventListener('click', function() {

        });
      });

      const cancelButtons = document.querySelectorAll('.btn-cancel');
      cancelButtons.forEach(button => {
        button.addEventListener('click', handleOrderCancellation);
      });

      const returnButtons = document.querySelectorAll('.btn-return');
      returnButtons.forEach(button => {
        button.addEventListener('click', handleOrderReturn);
      });

    const pdfButtons = document.querySelectorAll('.btn-pdf');
    pdfButtons.forEach(button => {
      button.addEventListener('click', function() {
        const orderId = this.closest('.order-card').querySelector('.order-id').textContent.split('#')[1];
        downloadPDF(orderId);
      });
    });

    const retryButtons = document.querySelectorAll('.btn-retry');
    retryButtons.forEach(button => {
      button.addEventListener('click', handleRetryPayment);
    });
    }

    function initializeTooltips() {
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });
    }

    function initializeModals() {
      const orderModals = document.querySelectorAll('.modal');
      orderModals.forEach(modal => {
        modal.addEventListener('show.bs.modal', function(event) {

        });
      });
    }

    async function handleOrderCancellation(event) {
      const orderCard = this.closest('.order-card');
      const orderId = orderCard.querySelector('.order-id').textContent.split('#')[1];

      const {
        value: reason
      } = await Swal.fire({
        title: 'Cancel Order',
        input: 'textarea',
        inputLabel: 'Reason for Cancel',
        inputPlaceholder: 'Please provide a reason for returning this order...',
        inputAttributes: {
          'aria-label': 'Cancel reason'
        },
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to provide a reason for cancel!'
          }
        }
      });

      if (reason) {
        try {
          const response = await fetch(`/order/cancel/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              reason
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              title: 'Cancelled!',
              text: 'Your order has been cancelled.',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            });
            window.location.reload();
          } else {
            await Swal.fire({
              title: 'Error!',
              text: data.message || 'Failed to cancel order',
              icon: 'error'
            });
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            title: 'Error!',
            text: 'Something went wrong!',
            icon: 'error'
          });
        }
      }
    }

    // Handle order return
    async function handleOrderReturn(event) {


      const orderCard = this.closest('.order-card');
      const orderId = orderCard.querySelector('.order-id').textContent.split('#')[1];




      const {
        value: reason
      } = await Swal.fire({
        title: 'Return Order',
        input: 'textarea',
        inputLabel: 'Reason for Return',
        inputPlaceholder: 'Please provide a reason for returning this order...',
        inputAttributes: {
          'aria-label': 'Return reason'
        },
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to provide a reason for return!'
          }
        }
      });



      if (reason) {
        try {
          const response = await fetch(`/order/return/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              reason,
              orderId
            })
          });




          const data = await response.json();



          if (data.success) {
            await Swal.fire({
              title: 'Return Requested!',
              text: data.message || 'Your return request has been submitted.',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            });
            window.location.reload();
          } else {
            
            await Swal.fire({
              title: 'wait!',
              text: 'Your return request has been submitted.',
              icon: 'esuccess'
            });

            window.location.reload();
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            title: 'Error!',
            text: 'Something went wrong!',
            icon: 'error'
          });
        }
      }
    }

    async function downloadPDF(orderId) {
  try {
    Swal.fire({
      title: 'Generating PDF...',
      html: 'Please wait while we generate your receipt',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    const response = await fetch(`/order/pdf/${orderId}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/pdf'
      }
    });

    if (!response.ok) {
      throw new Error('Failed to generate PDF');
    }

    const blob = await response.blob();

    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = `order-${orderId}-receipt.pdf`;

    document.body.appendChild(a);
    a.click();

    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);

    Swal.fire({
      title: 'Success!',
      text: 'Your receipt has been downloaded',
      icon: 'success',
      timer: 2000,
      showConfirmButton: false
    });

  } catch (error) {
    console.error('Error downloading PDF:', error);
    Swal.fire({
      title: 'Error!',
      text: 'Failed to download receipt. Please try again.',
      icon: 'error'
    });
  }
}

// Handle retry payment
async function handleRetryPayment(event) {
  const orderCard = this.closest('.order-card');
  const orderId = orderCard.querySelector('.order-id').textContent.split('#')[1];

  try {
    Swal.fire({
      title: 'Initializing Payment...',
      html: 'Please wait while we prepare your payment',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    // First, get the order details and Razorpay order ID
    const response = await fetch(`/order/retry-payment/${orderId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();

    if (!data.success) {
      throw new Error(data.message || 'Failed to initialize payment');
    }

    // Close the loading indicator
    Swal.close();

    // Initialize Razorpay payment
    const options = {
      key: data.razorpayKeyId, // Get this from your server response
      amount: data.amount,
      currency: data.currency,
      name: 'Your Store Name',
      description: `Order Payment Retry - #${orderId}`,
      order_id: data.razorpayOrderId,
      handler: async function (response) {
        // Show processing message
        Swal.fire({
          title: 'Processing Payment...',
          html: 'Please wait while we confirm your payment',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        try {
          // Verify payment with your server
          const verifyResponse = await fetch('/order/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId: orderId,
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature
            })
          });

          const verifyData = await verifyResponse.json();

          if (verifyData.success) {
            await Swal.fire({
              title: 'Payment Successful!',
              text: 'Your payment has been processed successfully',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            });
            window.location.reload();
          } else {
            throw new Error(verifyData.message || 'Payment verification failed');
          }
        } catch (error) {
          console.error('Payment verification error:', error);
          await Swal.fire({
            title: 'Verification Failed',
            text: error.message || 'Failed to verify payment. Please contact support.',
            icon: 'error'
          });
        }
      },
      prefill: {
        name: data.customerName,
        email: data.customerEmail,
        contact: data.customerPhone
      },
      theme: {
        color: '#3085d6'
      }
    };

    const rzp = new Razorpay(options);
    rzp.open();

    // Handle payment failure
    rzp.on('payment.failed', async function (response) {
      await Swal.fire({
        title: 'Payment Failed',
        text: response.error.description,
        icon: 'error'
      });
    });

  } catch (error) {
    console.error('Error retrying payment:', error);
    await Swal.fire({
      title: 'Error!',
      text: error.message || 'Something went wrong!',
      icon: 'error'
    });
  }
}
   
  </script>
</body>

</html>