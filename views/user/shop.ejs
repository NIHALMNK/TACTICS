<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tactics</title>
    <link rel="icon" type="image/x-icon" href="/images/produts-tactics/LOGO/3.png">

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
  <link rel="stylesheet" href="/css/user/shop.css">
</head>
<body>
   <!-------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
   <%- include('./layout/NAV.ejs') %>
   <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
   
<!--filter-->

<div class="container">
    <nav class="nav-category">
        <div class="nav-links">
            <% categories.forEach(category => { %> 
                <a href="/shop?category=<%= category.name.toUpperCase() %>" class="nav-link">
                    <%= category.name %>
                   
                </a>
            <% }) %>
        </div>
    


        
        <div class="controls-section">
            <button id="filter-toggle-btn" class="btn btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="4" y1="21" x2="4" y2="14"/>
                    <line x1="4" y1="10" x2="4" y2="3"/>
                    <line x1="12" y1="21" x2="12" y2="12"/>
                    <line x1="12" y1="8" x2="12" y2="3"/>
                    <line x1="20" y1="21" x2="20" y2="16"/>
                    <line x1="20" y1="12" x2="20" y2="3"/>
                    <line x1="1" y1="14" x2="7" y2="14"/>
                    <line x1="9" y1="8" x2="15" y2="8"/>
                    <line x1="17" y1="16" x2="23" y2="16"/>
                </svg>
                Filter
            </button>
            <div class="search-container">
                <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"/>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"/>
                </svg>
                <input type="text" class="search-input" placeholder="Search products...">
            </div>
        </div>
    </nav>

    <div class="filter-container">
        <div class="filter-grid">
            <div class="filter-section">
                <h3>Sort By</h3>
                <label class="option-label">
                    <input type="radio" name="sort" checked>
                    Default
                </label>
                <label class="option-label">
                    <input type="radio" name="sort">
                    Popularity
                </label>
                <label class="option-label">
                    <input type="radio" name="sort">
                    Average rating
                </label>
                <label class="option-label">
                    <input type="radio" name="sort">
                    Newness
                </label>
                <label class="option-label">
                    <input type="radio" name="sort">
                    Price: Low to High
                </label>
                <label class="option-label">
                    <input type="radio" name="sort">
                    Price: High to Low
                </label>
            </div>

            <div class="filter-section">
                <h3>Price Range</h3>
                <label class="option-label">
                    <input type="radio" name="price" checked>
                    All
                </label>
                <label class="option-label">
                    <input type="radio" name="price">
                    $0.00 - $50.00
                </label>
                <label class="option-label">
                    <input type="radio" name="price">
                    $50.00 - $100.00
                </label>
                <label class="option-label">
                    <input type="radio" name="price">
                    $100.00 - $150.00
                </label>
                <label class="option-label">
                    <input type="radio" name="price">
                    $150.00 - $200.00
                </label>
                <label class="option-label">
                    <input type="radio" name="price">
                    $200.00+
                </label>
            </div>

            <div class="filter-section">
                <h3>Name Range</h3>
                <label class="option-label">
                    <input type="radio" name="NameRange" checked>
                    All
                </label>
                <label class="option-label">
                    <input type="radio" name="NameRange">
                    A-Z
                </label>
                <label class="option-label">
                    <input type="radio" name="NameRange">
                    Z-A
                </label>
                
            </div>
        </div>
    </div>
</div>

 <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!-- Product Overview -->
 <!-- Product Grid -->
<div class="container">
    <div class="row">
      <% if (products && products.length > 0) { %>
          <% products.forEach((product) => { %>
              <div class="col-md-3 mb-4 d-flex justify-content-center">
                  <div class="product-card card">
                      <% if (product.discount) { %>
                          <div class="discount-badge"><%= product.discount %>% OFF</div>
                      <% } %>
                      
                      <a href="/product-detail/<%= product._id %>">
                          <img src="<%= product.images[0] %>" alt="<%= product.name %>" class="product-image main-image">
                          <img src="<%= product.images[1] || product.images[0] %>" alt="<%= product.name %> Back" class="product-image hover-image">
                      </a>
                      
                      <div class="card-icons">
                          <div class="card-icon wishlist-icon">
                              <i class="fas fa-heart"></i>
                          </div>
                          <div class="card-icon cart-icon">
                              <i class="fas fa-shopping-bag"></i>
                          </div>
                      </div>
                      
                      <div class="product-details">
                          <h5 class="card-title"><%= product.name %></h5>
                          <div class="d-flex justify-content-between">
                              <span class="text-danger fw-bold">
                                â‚¹<%= (product.offerPrice || product.price).toFixed(2) %>
                              </span>
                              
                              <% if (product.price) { %>
                                  <span class="text-muted text-decoration-line-through">$<%= product.price.toFixed(2) %></span>
                              <% } %>
                          </div>
                      </div>
                  </div>
              </div>
          <% }); %>
      <% } else { %>
          <div class="col-12">
              <p class="text-center">No products available.</p>
          </div>
      <% } %>
    </div>
  </div>
  
 <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
    <!--button for LODE MORE-->
      <section class="button-container">
        <button class="button-load" data-total-pages="<%= totalPages %>">
            <span class="button-content">Load more...</span>
        </button>
    </section>
      <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
      <!------footer------->
      <%- include('./layout/FOOTER.ejs') %>
      <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

       <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // DOM Elements
const filterToggleBtn = document.getElementById('filter-toggle-btn');
const filterContainer = document.querySelector('.filter-container');
const colorCircles = document.querySelectorAll('.color-circle');
const tags = document.querySelectorAll('.tag');
const searchInput = document.querySelector('.search-input');
const sortRadios = document.querySelectorAll('input[name="sort"]');
const priceRadios = document.querySelectorAll('input[name="price"]');

// State management
let activeFilters = {
sort: 'default',
price: 'all',
colors: [],
tags: [],
search: ''
};

// Toggle filter container
filterToggleBtn.addEventListener('click', () => {
filterContainer.classList.toggle('active');
});

// Color selection
colorCircles.forEach(circle => {
circle.addEventListener('click', () => {
    // Toggle selected state
    circle.classList.toggle('selected');
    
    // Update colors in activeFilters
    const color = circle.title.toLowerCase();
    if (circle.classList.contains('selected')) {
        activeFilters.colors.push(color);
    } else {
        activeFilters.colors = activeFilters.colors.filter(c => c !== color);
    }
    
    updateFilters();
});
});

// Tag selection
tags.forEach(tag => {
tag.addEventListener('click', () => {
    // Toggle active state
    tag.classList.toggle('active');
    
    // Update tags in activeFilters
    const tagText = tag.textContent.toLowerCase();
    if (tag.classList.contains('active')) {
        activeFilters.tags.push(tagText);
    } else {
        activeFilters.tags = activeFilters.tags.filter(t => t !== tagText);
    }
    
    updateFilters();
});
});

// Search functionality
let searchTimeout;
searchInput.addEventListener('input', (e) => {
// Clear previous timeout
clearTimeout(searchTimeout);

// Set new timeout for search (debouncing)
searchTimeout = setTimeout(() => {
    activeFilters.search = e.target.value.toLowerCase().trim();
    updateFilters();
}, 300);
});

// Sort radio buttons
sortRadios.forEach(radio => {
radio.addEventListener('change', (e) => {
    activeFilters.sort = e.target.parentElement.textContent.trim().toLowerCase();
    updateFilters();
});
});

// Price range radio buttons
priceRadios.forEach(radio => {
radio.addEventListener('change', (e) => {
    activeFilters.price = e.target.parentElement.textContent.trim().toLowerCase();
    updateFilters();
});
});

// Handle filter updates
function updateFilters() {
// Store filters in localStorage for persistence
localStorage.setItem('activeFilters', JSON.stringify(activeFilters));

// Dispatch custom event for filter changes
const filterEvent = new CustomEvent('filterUpdate', {
    detail: { filters: activeFilters }
});
document.dispatchEvent(filterEvent);

// Log current filters (for demonstration)
console.log('Active Filters:', activeFilters);
}

// Handle outside clicks to close filter container
document.addEventListener('click', (e) => {
const isClickInside = filterContainer.contains(e.target) || 
                     filterToggleBtn.contains(e.target);

if (!isClickInside && filterContainer.classList.contains('active')) {
    filterContainer.classList.remove('active');
}
});

// Initialize filters from localStorage if available
function initializeFilters() {
const savedFilters = localStorage.getItem('activeFilters');
if (savedFilters) {
    const parsedFilters = JSON.parse(savedFilters);
    activeFilters = { ...activeFilters, ...parsedFilters };
    
    // Restore UI state
    restoreUIState();
}
}

// Restore UI state from activeFilters
function restoreUIState() {
// Restore colors
colorCircles.forEach(circle => {
    const color = circle.title.toLowerCase();
    if (activeFilters.colors.includes(color)) {
        circle.classList.add('selected');
    }
});

// Restore tags
tags.forEach(tag => {
    const tagText = tag.textContent.toLowerCase();
    if (activeFilters.tags.includes(tagText)) {
        tag.classList.add('active');
    }
});

// Restore sort selection
sortRadios.forEach(radio => {
    if (radio.parentElement.textContent.trim().toLowerCase() === activeFilters.sort) {
        radio.checked = true;
    }
});

// Restore price selection
priceRadios.forEach(radio => {
    if (radio.parentElement.textContent.trim().toLowerCase() === activeFilters.price) {
        radio.checked = true;
    }
});

// Restore search
if (activeFilters.search) {
    searchInput.value = activeFilters.search;
}
}

// Clear all filters
function clearFilters() {
// Reset state
activeFilters = {
    sort: 'default',
    price: 'all',
    colors: [],
    tags: [],
    search: ''
};

// Reset UI
colorCircles.forEach(circle => circle.classList.remove('selected'));
tags.forEach(tag => tag.classList.remove('active'));
sortRadios[0].checked = true; // Select default sort
priceRadios[0].checked = true; // Select all prices
searchInput.value = '';

// Update filters
updateFilters();
}

// Add clear filters button functionality
const clearFiltersBtn = document.createElement('button');
clearFiltersBtn.className = 'btn';
clearFiltersBtn.textContent = 'Clear Filters';
clearFiltersBtn.addEventListener('click', clearFilters);
filterContainer.querySelector('.filter-grid').appendChild(clearFiltersBtn);

// Initialize filters on page load
document.addEventListener('DOMContentLoaded', initializeFilters);

// Handle responsive behavior
function handleResponsive() {
const isMobile = window.innerWidth <= 768;

if (isMobile) {
    // Close filter container when selecting on mobile
    filterContainer.addEventListener('click', (e) => {
        if (e.target.matches('input[type="radio"], .tag, .color-circle')) {
            setTimeout(() => {
                filterContainer.classList.remove('active');
            }, 300);
        }
    });
}
}

// Initialize responsive behavior
handleResponsive();
window.addEventListener('resize', handleResponsive);

//------------------->
document.querySelectorAll('.wishlist-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                this.classList.toggle('text-danger');
            });
        });

        document.querySelectorAll('.cart-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                alert('Added to cart!');
            });
        });

//--------------------lode more-->
// Load More Products Functionality
document.addEventListener('DOMContentLoaded', () => {
    const productsContainer = document.querySelector('.row');
    const loadMoreButton = document.querySelector('.button-load');
    let currentPage = 1;
    let totalPages = parseInt(loadMoreButton.getAttribute('data-total-pages') || 1);
    const categoryName = new URLSearchParams(window.location.search).get('category') || '';

    // Function to render products
    function renderProducts(products) {
        products.forEach(product => {
            const productColumn = document.createElement('div');
            productColumn.className = 'col-md-3 mb-4 d-flex justify-content-center';
            
            const productCardHTML = `
                <div class="product-card card">
                    ${product.discount ? `<div class="discount-badge">${product.discount}% OFF</div>` : ''}
                    
                    <a href="/product-detail/${product._id}">
                        <img src="${product.images[0]}" alt="${product.name}" class="product-image main-image">
                        <img src="${product.images[1] || product.images[0]}" alt="${product.name} Back" class="product-image hover-image">
                    </a>
                    
                    <div class="card-icons">
                        <div class="card-icon wishlist-icon">
                            <i class="fas fa-heart"></i>
                        </div>
                        <div class="card-icon cart-icon">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                    </div>
                    
                    <div class="product-details">
                        <h5 class="card-title">${product.name}</h5>
                        <div class="d-flex justify-content-between">
                            <span class="text-danger fw-bold">
                                $${(product.offerPrice || product.price).toFixed(2)}
                            </span>
                            
                            ${product.price ? `
                            <span class="text-muted text-decoration-line-through">
                                $${product.price.toFixed(2)}
                            </span>` : ''}
                        </div>
                    </div>
                </div>
            `;

            productColumn.innerHTML = productCardHTML;
            productsContainer.appendChild(productColumn);
        });

        // Re-attach event listeners for new wishlist and cart icons
        productsContainer.querySelectorAll('.wishlist-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                this.classList.toggle('text-danger');
            });
        });

        productsContainer.querySelectorAll('.cart-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                alert('Added to cart!');
            });
        });
    }

    // Fetch more products
    async function loadMoreProducts() {
        // Disable button during loading
        loadMoreButton.disabled = true;
        loadMoreButton.querySelector('.button-content').textContent = 'Loading...';

        try {
            // Construct URL with pagination and category
            const url = `/shop/products?page=${currentPage + 1}${categoryName ? `&category=${categoryName}` : ''}`;
            
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error('Failed to fetch products');
            }

            const data = await response.json();
            
            // Render new products
            renderProducts(data.products);
            
            // Update current page
            currentPage = data.currentPage;
            totalPages = data.totalPages;

            // Restore button text
            loadMoreButton.querySelector('.button-content').textContent = 'Load more...';
            loadMoreButton.disabled = false;

            // Hide load more button if no more pages
            if (currentPage >= totalPages) {
                loadMoreButton.style.display = 'none';
            }

        } catch (error) {
            console.error('Error loading more products:', error);
            
            // Restore button and hide it
            loadMoreButton.querySelector('.button-content').textContent = 'Load more...';
            loadMoreButton.disabled = false;
            loadMoreButton.style.display = 'none';
        }
    }

    // Add event listener to load more button
    loadMoreButton.addEventListener('click', loadMoreProducts);

    // Initially hide load more button if only one page
    if (totalPages <= 1) {
        loadMoreButton.style.display = 'none';
    }
});
</script>


</body>
</html>
